pipeline {
    agent any
    triggers {
        githubPush() 
    }
    environment {
        GITHUB_REPO = 'https://github.com/sakunthala-lash/jenkins-test-2.git'
    }

    stages {
        stage('Extract Payload Data') {
            steps {
                script {
                        echo "PR Branch Name: ${env.PR_BRANCH_NAME}"
                        echo "PR Commit SHA: ${env.PR_COMMIT_SHA}"
                }
            }
        }

        stage('Checkout') {
            steps {
                script {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "refs/heads/${env.PR_BRANCH_NAME}"]],
                        userRemoteConfigs: [[url: "${GITHUB_REPO}"]]
                    ])
                }
            }
        }

        stage('List All Environment Variables') {
            steps {
                script {
                    echo "Listing all available environment variables:"
                    bat 'set'
                }
            }
        }
        stage('Build') {
            steps {
                script {
                    try {
                        dir("${WORKSPACE}/demo") {
                            bat 'mvn clean install'
                        }
                    } catch (Exception e) {
                        githubNotify('failure', 'Maven build failed. Check logs.')
                        throw e
                    }
                }
            }
        }
      stage('Run Application') {
        steps {
            dir("${WORKSPACE}/demo") {
                powershell '''
                    # Start Spring Boot app in the background with a hidden window
                    $process = Start-Process -FilePath "java" -ArgumentList "-jar target/demo-0.0.1-SNAPSHOT.jar --server.port=8081 --spring.lifecycle.timeout-per-shutdown-phase=20s" -PassThru
    
                    # Log Process ID to confirm it's running
                    Write-Host "Spring Boot app started with Process ID: $($process.Id)"
    
                    # Ensure app log output to a file
                    Start-Process -FilePath "cmd" -ArgumentList "/c java -jar target/demo-0.0.1-SNAPSHOT.jar >> app.log 2>&1"
                    Write-Host "Logs are being saved to app.log"
                '''
            }
        }
    }




    }

    post {
        success {
            script {
                githubNotify('success', 'Jenkins build and tests passed!')
            }
        }
        failure {
            script {
                githubNotify('failure', 'Build or tests failed. Fix before merging!')
            }
        }
    }
}

def githubNotify(String status, String description) {
    withCredentials([string(credentialsId: 'id', variable: 'GITHUB_TOKEN')]) {
        //def commitHash = bat(script: 'git rev-parse HEAD', returnStdout: true).trim().split("\r?\n")[-1].trim()

        bat """
            curl -X POST -H "Authorization: token %GITHUB_TOKEN%" ^
            -H "Accept: application/vnd.github.v3+json" ^
            -d "{\\"state\\": \\"${status}\\", \\"description\\": \\"${description}\\", \\"context\\": \\"Jenkins CI\\"}" ^
            "https://api.github.com/repos/sakunthala-lash/jenkins-test-2/statuses/${env.PR_COMMIT_SHA}"
        """
    }
}
